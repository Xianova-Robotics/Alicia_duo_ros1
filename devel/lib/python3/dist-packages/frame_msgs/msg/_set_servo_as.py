# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frame_msgs/set_servo_as.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class set_servo_as(genpy.Message):
  _md5sum = "9a90f2689947b28e8c629edf3384926d"
  _type = "frame_msgs/set_servo_as"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 servo_type_4
std_msgs/Float32MultiArray servo_target_angle
std_msgs/Float32MultiArray servo_target_cycle
std_msgs/Float32 gripper_angle
std_msgs/UInt8MultiArray servo_target_angle_u8
std_msgs/UInt8MultiArray servo_target_cycle_u8
std_msgs/UInt8MultiArray gripper_angle_u8
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/UInt8MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
uint8[]           data          # array of data

"""
  __slots__ = ['servo_type_4','servo_target_angle','servo_target_cycle','gripper_angle','servo_target_angle_u8','servo_target_cycle_u8','gripper_angle_u8']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32MultiArray','std_msgs/Float32MultiArray','std_msgs/Float32','std_msgs/UInt8MultiArray','std_msgs/UInt8MultiArray','std_msgs/UInt8MultiArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servo_type_4,servo_target_angle,servo_target_cycle,gripper_angle,servo_target_angle_u8,servo_target_cycle_u8,gripper_angle_u8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_servo_as, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.servo_type_4 is None:
        self.servo_type_4 = std_msgs.msg.Float32()
      if self.servo_target_angle is None:
        self.servo_target_angle = std_msgs.msg.Float32MultiArray()
      if self.servo_target_cycle is None:
        self.servo_target_cycle = std_msgs.msg.Float32MultiArray()
      if self.gripper_angle is None:
        self.gripper_angle = std_msgs.msg.Float32()
      if self.servo_target_angle_u8 is None:
        self.servo_target_angle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.servo_target_cycle_u8 is None:
        self.servo_target_cycle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.gripper_angle_u8 is None:
        self.gripper_angle_u8 = std_msgs.msg.UInt8MultiArray()
    else:
      self.servo_type_4 = std_msgs.msg.Float32()
      self.servo_target_angle = std_msgs.msg.Float32MultiArray()
      self.servo_target_cycle = std_msgs.msg.Float32MultiArray()
      self.gripper_angle = std_msgs.msg.Float32()
      self.servo_target_angle_u8 = std_msgs.msg.UInt8MultiArray()
      self.servo_target_cycle_u8 = std_msgs.msg.UInt8MultiArray()
      self.gripper_angle_u8 = std_msgs.msg.UInt8MultiArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.servo_type_4.data
      buff.write(_get_struct_f().pack(_x))
      length = len(self.servo_target_angle.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_angle.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_angle.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.servo_target_angle.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.servo_target_angle.data))
      length = len(self.servo_target_cycle.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_cycle.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_cycle.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.servo_target_cycle.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.servo_target_cycle.data))
      _x = self.gripper_angle.data
      buff.write(_get_struct_f().pack(_x))
      length = len(self.servo_target_angle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_angle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_angle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.servo_target_angle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.servo_target_cycle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_cycle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_cycle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.servo_target_cycle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.gripper_angle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.gripper_angle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.gripper_angle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.gripper_angle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.servo_type_4 is None:
        self.servo_type_4 = std_msgs.msg.Float32()
      if self.servo_target_angle is None:
        self.servo_target_angle = std_msgs.msg.Float32MultiArray()
      if self.servo_target_cycle is None:
        self.servo_target_cycle = std_msgs.msg.Float32MultiArray()
      if self.gripper_angle is None:
        self.gripper_angle = std_msgs.msg.Float32()
      if self.servo_target_angle_u8 is None:
        self.servo_target_angle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.servo_target_cycle_u8 is None:
        self.servo_target_cycle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.gripper_angle_u8 is None:
        self.gripper_angle_u8 = std_msgs.msg.UInt8MultiArray()
      end = 0
      start = end
      end += 4
      (self.servo_type_4.data,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_angle.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_angle.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_angle.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servo_target_angle.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_cycle.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_cycle.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_cycle.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servo_target_cycle.data = s.unpack(str[start:end])
      start = end
      end += 4
      (self.gripper_angle.data,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_angle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_angle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_angle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.servo_target_angle_u8.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_cycle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_cycle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_cycle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.servo_target_cycle_u8.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gripper_angle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.gripper_angle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.gripper_angle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gripper_angle_u8.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.servo_type_4.data
      buff.write(_get_struct_f().pack(_x))
      length = len(self.servo_target_angle.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_angle.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_angle.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.servo_target_angle.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.servo_target_angle.data.tostring())
      length = len(self.servo_target_cycle.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_cycle.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_cycle.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.servo_target_cycle.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.servo_target_cycle.data.tostring())
      _x = self.gripper_angle.data
      buff.write(_get_struct_f().pack(_x))
      length = len(self.servo_target_angle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_angle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_angle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.servo_target_angle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.servo_target_cycle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_target_cycle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.servo_target_cycle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.servo_target_cycle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.gripper_angle_u8.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.gripper_angle_u8.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.gripper_angle_u8.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      _x = self.gripper_angle_u8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.servo_type_4 is None:
        self.servo_type_4 = std_msgs.msg.Float32()
      if self.servo_target_angle is None:
        self.servo_target_angle = std_msgs.msg.Float32MultiArray()
      if self.servo_target_cycle is None:
        self.servo_target_cycle = std_msgs.msg.Float32MultiArray()
      if self.gripper_angle is None:
        self.gripper_angle = std_msgs.msg.Float32()
      if self.servo_target_angle_u8 is None:
        self.servo_target_angle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.servo_target_cycle_u8 is None:
        self.servo_target_cycle_u8 = std_msgs.msg.UInt8MultiArray()
      if self.gripper_angle_u8 is None:
        self.gripper_angle_u8 = std_msgs.msg.UInt8MultiArray()
      end = 0
      start = end
      end += 4
      (self.servo_type_4.data,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_angle.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_angle.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_angle.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servo_target_angle.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_cycle.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_cycle.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_cycle.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servo_target_cycle.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.gripper_angle.data,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_angle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_angle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_angle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.servo_target_angle_u8.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_target_cycle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.servo_target_cycle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.servo_target_cycle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.servo_target_cycle_u8.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gripper_angle_u8.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.gripper_angle_u8.layout.dim.append(val1)
      start = end
      end += 4
      (self.gripper_angle_u8.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gripper_angle_u8.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
