// Generated by gencpp from file diffusion_policy/eef_pose.msg
// DO NOT EDIT!


#ifndef DIFFUSION_POLICY_MESSAGE_EEF_POSE_H
#define DIFFUSION_POLICY_MESSAGE_EEF_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diffusion_policy
{
template <class ContainerAllocator>
struct eef_pose_
{
  typedef eef_pose_<ContainerAllocator> Type;

  eef_pose_()
    : eef_pose()  {
    }
  eef_pose_(const ContainerAllocator& _alloc)
    : eef_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _eef_pose_type;
  _eef_pose_type eef_pose;





  typedef boost::shared_ptr< ::diffusion_policy::eef_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diffusion_policy::eef_pose_<ContainerAllocator> const> ConstPtr;

}; // struct eef_pose_

typedef ::diffusion_policy::eef_pose_<std::allocator<void> > eef_pose;

typedef boost::shared_ptr< ::diffusion_policy::eef_pose > eef_posePtr;
typedef boost::shared_ptr< ::diffusion_policy::eef_pose const> eef_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diffusion_policy::eef_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diffusion_policy::eef_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diffusion_policy::eef_pose_<ContainerAllocator1> & lhs, const ::diffusion_policy::eef_pose_<ContainerAllocator2> & rhs)
{
  return lhs.eef_pose == rhs.eef_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diffusion_policy::eef_pose_<ContainerAllocator1> & lhs, const ::diffusion_policy::eef_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diffusion_policy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::eef_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::eef_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::eef_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::eef_pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::eef_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::eef_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diffusion_policy::eef_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dada35c3813c36ce3dd435fc2d196ca";
  }

  static const char* value(const ::diffusion_policy::eef_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dada35c3813c36cULL;
  static const uint64_t static_value2 = 0xe3dd435fc2d196caULL;
};

template<class ContainerAllocator>
struct DataType< ::diffusion_policy::eef_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diffusion_policy/eef_pose";
  }

  static const char* value(const ::diffusion_policy::eef_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diffusion_policy::eef_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] eef_pose\n"
;
  }

  static const char* value(const ::diffusion_policy::eef_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diffusion_policy::eef_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eef_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eef_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diffusion_policy::eef_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diffusion_policy::eef_pose_<ContainerAllocator>& v)
  {
    s << indent << "eef_pose[]" << std::endl;
    for (size_t i = 0; i < v.eef_pose.size(); ++i)
    {
      s << indent << "  eef_pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.eef_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFUSION_POLICY_MESSAGE_EEF_POSE_H
