// Generated by gencpp from file diffusion_policy/joint_vel.msg
// DO NOT EDIT!


#ifndef DIFFUSION_POLICY_MESSAGE_JOINT_VEL_H
#define DIFFUSION_POLICY_MESSAGE_JOINT_VEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diffusion_policy
{
template <class ContainerAllocator>
struct joint_vel_
{
  typedef joint_vel_<ContainerAllocator> Type;

  joint_vel_()
    : joint_vel()  {
    }
  joint_vel_(const ContainerAllocator& _alloc)
    : joint_vel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _joint_vel_type;
  _joint_vel_type joint_vel;





  typedef boost::shared_ptr< ::diffusion_policy::joint_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diffusion_policy::joint_vel_<ContainerAllocator> const> ConstPtr;

}; // struct joint_vel_

typedef ::diffusion_policy::joint_vel_<std::allocator<void> > joint_vel;

typedef boost::shared_ptr< ::diffusion_policy::joint_vel > joint_velPtr;
typedef boost::shared_ptr< ::diffusion_policy::joint_vel const> joint_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diffusion_policy::joint_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diffusion_policy::joint_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diffusion_policy::joint_vel_<ContainerAllocator1> & lhs, const ::diffusion_policy::joint_vel_<ContainerAllocator2> & rhs)
{
  return lhs.joint_vel == rhs.joint_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diffusion_policy::joint_vel_<ContainerAllocator1> & lhs, const ::diffusion_policy::joint_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diffusion_policy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::joint_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::joint_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::joint_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::joint_vel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::joint_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::joint_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diffusion_policy::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "735276c7cfd280519eb976cd7d752b51";
  }

  static const char* value(const ::diffusion_policy::joint_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x735276c7cfd28051ULL;
  static const uint64_t static_value2 = 0x9eb976cd7d752b51ULL;
};

template<class ContainerAllocator>
struct DataType< ::diffusion_policy::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diffusion_policy/joint_vel";
  }

  static const char* value(const ::diffusion_policy::joint_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diffusion_policy::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] joint_vel\n"
;
  }

  static const char* value(const ::diffusion_policy::joint_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diffusion_policy::joint_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diffusion_policy::joint_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diffusion_policy::joint_vel_<ContainerAllocator>& v)
  {
    s << indent << "joint_vel[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel.size(); ++i)
    {
      s << indent << "  joint_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFUSION_POLICY_MESSAGE_JOINT_VEL_H
