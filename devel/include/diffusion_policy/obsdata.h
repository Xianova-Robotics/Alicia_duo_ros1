// Generated by gencpp from file diffusion_policy/obsdata.msg
// DO NOT EDIT!


#ifndef DIFFUSION_POLICY_MESSAGE_OBSDATA_H
#define DIFFUSION_POLICY_MESSAGE_OBSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace diffusion_policy
{
template <class ContainerAllocator>
struct obsdata_
{
  typedef obsdata_<ContainerAllocator> Type;

  obsdata_()
    : header()
    , robot_eef_pose()
    , robot_eef_pose_vel()
    , robot_joint()
    , robot_joint_vel()
    , step_idx(0)  {
    }
  obsdata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_eef_pose(_alloc)
    , robot_eef_pose_vel(_alloc)
    , robot_joint(_alloc)
    , robot_joint_vel(_alloc)
    , step_idx(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _robot_eef_pose_type;
  _robot_eef_pose_type robot_eef_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _robot_eef_pose_vel_type;
  _robot_eef_pose_vel_type robot_eef_pose_vel;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _robot_joint_type;
  _robot_joint_type robot_joint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _robot_joint_vel_type;
  _robot_joint_vel_type robot_joint_vel;

   typedef int32_t _step_idx_type;
  _step_idx_type step_idx;





  typedef boost::shared_ptr< ::diffusion_policy::obsdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diffusion_policy::obsdata_<ContainerAllocator> const> ConstPtr;

}; // struct obsdata_

typedef ::diffusion_policy::obsdata_<std::allocator<void> > obsdata;

typedef boost::shared_ptr< ::diffusion_policy::obsdata > obsdataPtr;
typedef boost::shared_ptr< ::diffusion_policy::obsdata const> obsdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diffusion_policy::obsdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diffusion_policy::obsdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diffusion_policy::obsdata_<ContainerAllocator1> & lhs, const ::diffusion_policy::obsdata_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.robot_eef_pose == rhs.robot_eef_pose &&
    lhs.robot_eef_pose_vel == rhs.robot_eef_pose_vel &&
    lhs.robot_joint == rhs.robot_joint &&
    lhs.robot_joint_vel == rhs.robot_joint_vel &&
    lhs.step_idx == rhs.step_idx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diffusion_policy::obsdata_<ContainerAllocator1> & lhs, const ::diffusion_policy::obsdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diffusion_policy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::obsdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::obsdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::obsdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::obsdata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::obsdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::obsdata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diffusion_policy::obsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af64483db77873de2449b47fc7837f9c";
  }

  static const char* value(const ::diffusion_policy::obsdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf64483db77873deULL;
  static const uint64_t static_value2 = 0x2449b47fc7837f9cULL;
};

template<class ContainerAllocator>
struct DataType< ::diffusion_policy::obsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diffusion_policy/obsdata";
  }

  static const char* value(const ::diffusion_policy::obsdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diffusion_policy::obsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64[] robot_eef_pose\n"
"float64[] robot_eef_pose_vel\n"
"float64[] robot_joint\n"
"float64[] robot_joint_vel\n"
"int32 step_idx\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::diffusion_policy::obsdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diffusion_policy::obsdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_eef_pose);
      stream.next(m.robot_eef_pose_vel);
      stream.next(m.robot_joint);
      stream.next(m.robot_joint_vel);
      stream.next(m.step_idx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obsdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diffusion_policy::obsdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diffusion_policy::obsdata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_eef_pose[]" << std::endl;
    for (size_t i = 0; i < v.robot_eef_pose.size(); ++i)
    {
      s << indent << "  robot_eef_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_eef_pose[i]);
    }
    s << indent << "robot_eef_pose_vel[]" << std::endl;
    for (size_t i = 0; i < v.robot_eef_pose_vel.size(); ++i)
    {
      s << indent << "  robot_eef_pose_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_eef_pose_vel[i]);
    }
    s << indent << "robot_joint[]" << std::endl;
    for (size_t i = 0; i < v.robot_joint.size(); ++i)
    {
      s << indent << "  robot_joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_joint[i]);
    }
    s << indent << "robot_joint_vel[]" << std::endl;
    for (size_t i = 0; i < v.robot_joint_vel.size(); ++i)
    {
      s << indent << "  robot_joint_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_joint_vel[i]);
    }
    s << indent << "step_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.step_idx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFUSION_POLICY_MESSAGE_OBSDATA_H
