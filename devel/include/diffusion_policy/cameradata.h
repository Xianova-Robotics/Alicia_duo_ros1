// Generated by gencpp from file diffusion_policy/cameradata.msg
// DO NOT EDIT!


#ifndef DIFFUSION_POLICY_MESSAGE_CAMERADATA_H
#define DIFFUSION_POLICY_MESSAGE_CAMERADATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace diffusion_policy
{
template <class ContainerAllocator>
struct cameradata_
{
  typedef cameradata_<ContainerAllocator> Type;

  cameradata_()
    : header()
    , rgb()
    , T(0)
    , H(0)
    , W(0)
    , C(0)  {
    }
  cameradata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rgb(_alloc)
    , T(0)
    , H(0)
    , W(0)
    , C(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _rgb_type;
  _rgb_type rgb;

   typedef uint32_t _T_type;
  _T_type T;

   typedef uint32_t _H_type;
  _H_type H;

   typedef uint32_t _W_type;
  _W_type W;

   typedef uint32_t _C_type;
  _C_type C;





  typedef boost::shared_ptr< ::diffusion_policy::cameradata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diffusion_policy::cameradata_<ContainerAllocator> const> ConstPtr;

}; // struct cameradata_

typedef ::diffusion_policy::cameradata_<std::allocator<void> > cameradata;

typedef boost::shared_ptr< ::diffusion_policy::cameradata > cameradataPtr;
typedef boost::shared_ptr< ::diffusion_policy::cameradata const> cameradataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diffusion_policy::cameradata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diffusion_policy::cameradata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diffusion_policy::cameradata_<ContainerAllocator1> & lhs, const ::diffusion_policy::cameradata_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rgb == rhs.rgb &&
    lhs.T == rhs.T &&
    lhs.H == rhs.H &&
    lhs.W == rhs.W &&
    lhs.C == rhs.C;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diffusion_policy::cameradata_<ContainerAllocator1> & lhs, const ::diffusion_policy::cameradata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diffusion_policy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::cameradata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diffusion_policy::cameradata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::cameradata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diffusion_policy::cameradata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::cameradata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diffusion_policy::cameradata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diffusion_policy::cameradata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e2a505638727cb25c53a7697e72a52a";
  }

  static const char* value(const ::diffusion_policy::cameradata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e2a505638727cb2ULL;
  static const uint64_t static_value2 = 0x5c53a7697e72a52aULL;
};

template<class ContainerAllocator>
struct DataType< ::diffusion_policy::cameradata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diffusion_policy/cameradata";
  }

  static const char* value(const ::diffusion_policy::cameradata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diffusion_policy::cameradata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# cameraData.msg\n"
"std_msgs/Header header\n"
"uint8[] rgb          # 扁平化后的图像数据\n"
"uint32 T                # 帧数\n"
"uint32 H                # 图像高度\n"
"uint32 W                # 图像宽度\n"
"uint32 C                # 颜色通道数\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::diffusion_policy::cameradata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diffusion_policy::cameradata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rgb);
      stream.next(m.T);
      stream.next(m.H);
      stream.next(m.W);
      stream.next(m.C);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cameradata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diffusion_policy::cameradata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diffusion_policy::cameradata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rgb[]" << std::endl;
    for (size_t i = 0; i < v.rgb.size(); ++i)
    {
      s << indent << "  rgb[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rgb[i]);
    }
    s << indent << "T: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.T);
    s << indent << "H: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.H);
    s << indent << "W: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.W);
    s << indent << "C: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.C);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFUSION_POLICY_MESSAGE_CAMERADATA_H
